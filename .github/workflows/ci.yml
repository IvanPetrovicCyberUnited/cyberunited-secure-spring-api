name: CI

on:
  push:
    branches: [ main, develop ]
    paths-ignore: [ "docs/**", "*.md" ]
  pull_request:
    branches: [ "**" ]
    paths-ignore: [ "docs/**", "*.md" ]
  schedule:
    - cron: "0 2 * * *"
  workflow_dispatch: {}

# Least privilege (fix für CKV2_GHA_1)
permissions:
  contents: read

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

env:
  GH_API: https://api.github.com
  CURL_CONNECT_TIMEOUT: "10"
  CURL_MAX_TIME: "120"
  UPLOAD_MAX_RETRIES: "3"
  SEMGREP_TIMEOUT_SECONDS: "420"
  SEMGREP_MAX_BYTES: "200000000"
  SARIF_MAX_COMPRESSED: "10485760"

jobs:

  # --- 0) DETECT: erkennt Projekt-Layout & setzt Flags ---
  detect:
    runs-on: ubuntu-latest
    timeout-minutes: 10
    outputs:
      has_gradle:     ${{ steps.out.outputs.has_gradle }}
      has_openapi:    ${{ steps.out.outputs.has_openapi }}
      has_dockerfile: ${{ steps.out.outputs.has_dockerfile }}
      has_policy:     ${{ steps.out.outputs.has_policy }}
      openapi_file:   ${{ steps.out.outputs.openapi_file }}
    steps:
      - name: Checkout (manual)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          SHA:  ${{ github.sha }}
        run: |
          set -euo pipefail
          git init .
          git config --global --add safe.directory "$PWD"
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"
          git fetch --depth=1 origin "${SHA}"
          git checkout --force FETCH_HEAD

      - name: Detect files and set outputs (debug)
        id: out
        run: |
          set -euo pipefail
          echo "== ls -la =="
          ls -la
          echo "== find (maxdepth 3) =="
          (set -x; find . -maxdepth 3 -type f \( -name 'gradlew' -o -name 'build.gradle*' -o -name 'settings.gradle*' -o -name 'openapi.y*ml' -o -name 'Dockerfile' \) || true)
          (set -x; find . -maxdepth 3 -type d -name 'policy' || true)

          # Gradle
          if [ -f gradlew ] || [ -f build.gradle ] || [ -f build.gradle.kts ]; then
            echo "has_gradle=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_gradle=false" >> "$GITHUB_OUTPUT"
          fi

          # OpenAPI (yaml/yml)
          if [ -f openapi.yaml ] || [ -f openapi.yml ]; then
            OAS=$( [ -f openapi.yaml ] && echo openapi.yaml || echo openapi.yml )
            echo "has_openapi=true"   >> "$GITHUB_OUTPUT"
            echo "openapi_file=$OAS"  >> "$GITHUB_OUTPUT"
          else
            echo "has_openapi=false"  >> "$GITHUB_OUTPUT"
            echo "openapi_file="      >> "$GITHUB_OUTPUT"
          fi

          # Dockerfile
          if [ -f Dockerfile ]; then
            echo "has_dockerfile=true" >> "$GITHUB_OUTPUT"
          else
            echo "has_dockerfile=false" >> "$GITHUB_OUTPUT"
          fi

          # policy/
          if [ -d policy ]; then
            echo "has_policy=true"  >> "$GITHUB_OUTPUT"
          else
            echo "has_policy=false" >> "$GITHUB_OUTPUT"
          fi

          echo "== Outputs =="; cat "$GITHUB_OUTPUT"

  # --- 1) BUILD/TEST/SAST/SCA ---
  build-test-sast:
    needs: [ detect ]
    if: ${{ needs.detect.outputs.has_gradle == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Checkout (manual, no actions)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          SHA:  ${{ github.sha }}
        run: |
          set -euo pipefail
          git init .
          git config --global advice.detachedHead false
          git config --global --add safe.directory "$PWD"
          git config --global gc.auto 0
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"
          for i in 1 2; do
            if git fetch --depth=1 origin "${SHA}"; then break; fi
            echo "Retry fetch ($i/2)"; sleep 2
          done
          git checkout --force FETCH_HEAD
          git rev-parse --verify HEAD

      - name: Install tools (jq, coreutils) + JDK 21 (fallback 17)
        run: |
          set -euo pipefail
          sudo apt-get update -y
          sudo apt-get install -y jq coreutils
          sudo apt-get install -y openjdk-21-jdk || sudo apt-get install -y openjdk-17-jdk
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))" >> $GITHUB_ENV
          echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV
          java -version

      - name: Bootstrap Gradle wrapper (create JAR if missing)
        run: |
          set -euo pipefail
          PROP_FILE="gradle/wrapper/gradle-wrapper.properties"
          if [ -f "$PROP_FILE" ]; then
            RAW_URL="$(sed -n 's/^distributionUrl=//p' "$PROP_FILE")"
          else
            RAW_URL="https://services.gradle.org/distributions/gradle-8.10.2-bin.zip"
            mkdir -p gradle/wrapper
            printf 'distributionUrl=%s\n' "$RAW_URL" >> "$PROP_FILE"
          fi
          # "https\://..." -> "https://..."
          DIST_URL="$(printf '%s' "$RAW_URL" | sed 's#\\:##g')"
          VER="$(printf '%s' "$DIST_URL" | sed -n 's#.*gradle-\([0-9][0-9.]*\)-bin\.zip#\1#p')"
          [ -z "$VER" ] && VER="8.10.2" && DIST_URL="https://services.gradle.org/distributions/gradle-${VER}-bin.zip"
          TMP=/tmp/gradle; mkdir -p "$TMP"
          curl -fsSL --retry 3 -o "$TMP/gradle-${VER}-bin.zip" "$DIST_URL"
          SHA256="$(sha256sum "$TMP/gradle-${VER}-bin.zip" | awk '{print $1}')"
          unzip -q "$TMP/gradle-${VER}-bin.zip" -d "$TMP"
          export GRADLE_HOME="$TMP/gradle-${VER}"
          export PATH="$GRADLE_HOME/bin:$PATH"
          gradle --version
          gradle wrapper --gradle-version "$VER" --gradle-distribution-sha256-sum "$SHA256"
          # Harter Check: JAR MUSS da sein
          test -f gradle/wrapper/gradle-wrapper.jar || { echo "gradle-wrapper.jar fehlt!"; exit 1; }

      - name: Gradle build & tests
        run: |
          set -euo pipefail
          chmod +x gradlew
          ./gradlew --no-daemon clean build check jacocoTestReport pitest

      - name: Static checks (SpotBugs/PMD/Checkstyle)
        run: ./gradlew --no-daemon spotbugsMain spotbugsTest pmdMain pmdTest checkstyleMain checkstyleTest

      - name: SCA & SBOM (OWASP DC + CycloneDX)
        env:
          NVD_API_KEY: ${{ secrets.NVD_API_KEY }}
        run: |
          set -euo pipefail
          EXTRA_OPTS=""
          if [ -n "${NVD_API_KEY:-}" ]; then
            EXTRA_OPTS="-PdependencyCheck.nvd.apiKey=${NVD_API_KEY}"
          else
            echo "WARNING: NVD_API_KEY not set – NVD kann langsam / ratelimited sein."
          fi
          ./gradlew --no-daemon -Dorg.gradle.unsafe.configuration-cache=false \
            ${EXTRA_OPTS} dependencyCheckAnalyze cyclonedxBom

      - name: SAST Semgrep → SARIF
        env:
          SEMGREP_TIMEOUT_SECONDS: ${{ env.SEMGREP_TIMEOUT_SECONDS }}
          SEMGREP_MAX_BYTES: ${{ env.SEMGREP_MAX_BYTES }}
        run: |
          set -euo pipefail
          mkdir -p reports/semgrep
          for i in 1 2 3; do
            if docker pull returntocorp/semgrep:latest; then break; fi
            echo "Retry docker pull semgrep ($i/3)"; sleep 3
          done
          docker run --rm -v "$PWD:/src" --workdir /src \
            returntocorp/semgrep:latest \
            semgrep --config p/owasp-top-ten --config p/java \
                    --timeout "${SEMGREP_TIMEOUT_SECONDS}" \
                    --max-target-bytes "${SEMGREP_MAX_BYTES}" \
                    --metrics=off \
                    --sarif -o reports/semgrep/semgrep.sarif || true
          [ -s reports/semgrep/semgrep.sarif ] || jq -n '{
            "$schema":"https://schemastore.azurewebsites.net/schemas/json/sarif-2.1.0-rtm.5.json",
            "version":"2.1.0",
            "runs":[{"tool":{"driver":{"name":"semgrep"}},"results":[]}]
          }' > reports/semgrep/semgrep.sarif

      - name: Upload SARIF (API; gzip+base64; retries)
        if: ${{ always() }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CURL_CONNECT_TIMEOUT: ${{ env.CURL_CONNECT_TIMEOUT }}
          CURL_MAX_TIME: ${{ env.CURL_MAX_TIME }}
          UPLOAD_MAX_RETRIES: ${{ env.UPLOAD_MAX_RETRIES }}
          SARIF_MAX_COMPRESSED: ${{ env.SARIF_MAX_COMPRESSED }}
        run: |
          set -euo pipefail
          [ -s reports/semgrep/semgrep.sarif ] || { echo "No SARIF, skip"; exit 0; }
          gzip -c reports/semgrep/semgrep.sarif > reports/semgrep/semgrep.sarif.gz
          BYTES=$(stat -c%s reports/semgrep/semgrep.sarif.gz)
          echo "Compressed size: ${BYTES} bytes"
          [ "$BYTES" -lt "$SARIF_MAX_COMPRESSED" ] || { echo "SARIF gz too large"; exit 3; }
          base64 -w 0 reports/semgrep/semgrep.sarif.gz > reports/semgrep/semgrep.sarif.gz.b64
          jq -n \
            --rawfile sarif_b64 reports/semgrep/semgrep.sarif.gz.b64 \
            --arg sha "${{ github.sha }}" \
            --arg ref "${{ github.ref }}" \
            --arg tool "semgrep" \
            '{commit_sha:$sha, ref:$ref, sarif:($sarif_b64), tool_name:$tool}' > sarif_payload.json

          HTTP="000"
          for i in 1 2 3; do
            echo "Upload attempt $i/3"
            HTTP=$(curl -sS -o response.json -w "%{http_code}" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/json" \
              -H "Content-Type: application/json" \
              --connect-timeout "${CURL_CONNECT_TIMEOUT}" \
              --max-time "${CURL_MAX_TIME}" \
              -X POST "$GH_API/repos/${{ github.repository }}/code-scanning/sarifs" \
              --data @sarif_payload.json || echo "000")
            [ "$HTTP" = "202" ] && { echo "Upload accepted (202)"; break; }
            echo "Upload failed (HTTP=$HTTP). Retry in 4s"; sleep 4
          done
          [ "$HTTP" = "202" ] || { echo "Final upload failed"; cat response.json || true; exit 4; }

  # --- 2) API fuzz/contract ---
  api-fuzz-contract:
    needs: [ detect ]
    if: ${{ needs.detect.outputs.has_gradle == 'true' && needs.detect.outputs.has_openapi == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 30
    permissions:
      contents: read
    steps:
      - name: Checkout (manual)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          SHA:  ${{ github.sha }}
        run: |
          set -euo pipefail
          git init .
          git config --global --add safe.directory "$PWD"
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"
          git fetch --depth=1 origin "${SHA}"
          git checkout --force FETCH_HEAD

      - name: Install JDK
        run: |
          sudo apt-get update -y
          sudo apt-get install -y openjdk-21-jdk || sudo apt-get install -y openjdk-17-jdk
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))" >> $GITHUB_ENV
          echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV

      - name: Bootstrap Gradle wrapper (create JAR if missing)
        run: |
          set -euo pipefail
          PROP_FILE="gradle/wrapper/gradle-wrapper.properties"
          if [ -f "$PROP_FILE" ]; then
            RAW_URL="$(sed -n 's/^distributionUrl=//p' "$PROP_FILE")"
          else
            RAW_URL="https://services.gradle.org/distributions/gradle-8.10.2-bin.zip"
            mkdir -p gradle/wrapper
            printf 'distributionUrl=%s\n' "$RAW_URL" >> "$PROP_FILE"
          fi
          DIST_URL="$(printf '%s' "$RAW_URL" | sed 's#\\:##g')"
          VER="$(printf '%s' "$DIST_URL" | sed -n 's#.*gradle-\([0-9][0-9.]*\)-bin\.zip#\1#p')"
          [ -z "$VER" ] && VER="8.10.2" && DIST_URL="https://services.gradle.org/distributions/gradle-${VER}-bin.zip"
          TMP=/tmp/gradle; mkdir -p "$TMP"
          curl -fsSL --retry 3 -o "$TMP/gradle-${VER}-bin.zip" "$DIST_URL"
          SHA256="$(sha256sum "$TMP/gradle-${VER}-bin.zip" | awk '{print $1}')"
          unzip -q "$TMP/gradle-${VER}-bin.zip" -d "$TMP"
          export GRADLE_HOME="$TMP/gradle-${VER}"
          export PATH="$GRADLE_HOME/bin:$PATH"
          gradle wrapper --gradle-version "$VER" --gradle-distribution-sha256-sum "$SHA256"
          test -f gradle/wrapper/gradle-wrapper.jar || { echo "gradle-wrapper.jar fehlt!"; exit 1; }

      - name: Start app
        run: ./gradlew --no-daemon bootRun & sleep 15

      - name: Schemathesis fuzz and contract
        run: |
          set -euo pipefail
          python3 -m pip install --user --upgrade pip schemathesis
          mkdir -p reports/schemathesis
          python3 -m schemathesis.cli run "${{ needs.detect.outputs.openapi_file }}" --checks all \
            --base-url http://localhost:8080 \
            --hypothesis-deadline=200 --hypothesis-max-examples=200 \
            --report=reports/schemathesis/report.json

      - name: Stop app
        if: always()
        run: killall java || true

  # --- 3) Image bauen, scannen, pushen, signieren ---
  build-image:
    needs: [ detect, build-test-sast ]
    if: ${{ needs.detect.outputs.has_gradle == 'true' && needs.detect.outputs.has_dockerfile == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 45
    permissions:
      contents: read
      packages: write
      id-token: write
    steps:
      - name: Checkout (manual)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          SHA:  ${{ github.sha }}
        run: |
          set -euo pipefail
          git init .
          git config --global --add safe.directory "$PWD"
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"
          git fetch --depth=1 origin "${SHA}"
          git checkout --force FETCH_HEAD

      - name: Install JDK
        run: |
          sudo apt-get update -y
          sudo apt-get install -y openjdk-21-jdk || sudo apt-get install -y openjdk-17-jdk
          echo "JAVA_HOME=$(dirname $(dirname $(readlink -f $(which javac))))" >> $GITHUB_ENV
          echo "PATH=$JAVA_HOME/bin:$PATH" >> $GITHUB_ENV

      - name: Bootstrap Gradle wrapper (create JAR if missing)
        run: |
          set -euo pipefail
          PROP_FILE="gradle/wrapper/gradle-wrapper.properties"
          if [ -f "$PROP_FILE" ]; then
            RAW_URL="$(sed -n 's/^distributionUrl=//p' "$PROP_FILE")"
          else
            RAW_URL="https://services.gradle.org/distributions/gradle-8.10.2-bin.zip"
            mkdir -p gradle/wrapper
            printf 'distributionUrl=%s\n' "$RAW_URL" >> "$PROP_FILE"
          fi
          DIST_URL="$(printf '%s' "$RAW_URL" | sed 's#\\:##g')"
          VER="$(printf '%s' "$DIST_URL" | sed -n 's#.*gradle-\([0-9][0-9.]*\)-bin\.zip#\1#p')"
          [ -z "$VER" ] && VER="8.10.2" && DIST_URL="https://services.gradle.org/distributions/gradle-${VER}-bin.zip"
          TMP=/tmp/gradle; mkdir -p "$TMP"
          curl -fsSL --retry 3 -o "$TMP/gradle-${VER}-bin.zip" "$DIST_URL"
          SHA256="$(sha256sum "$TMP/gradle-${VER}-bin.zip" | awk '{print $1}')"
          unzip -q "$TMP/gradle-${VER}-bin.zip" -d "$TMP"
          export GRADLE_HOME="$TMP/gradle-${VER}"
          export PATH="$GRADLE_HOME/bin:$PATH"
          gradle wrapper --gradle-version "$VER" --gradle-distribution-sha256-sum "$SHA256"
          test -f gradle/wrapper/gradle-wrapper.jar || { echo "gradle-wrapper.jar fehlt!"; exit 1; }

      - name: Build jar
        run: ./gradlew --no-daemon bootJar

      - name: Docker build
        run: docker build -t ghcr.io/${{ github.repository }}:sha-${{ github.sha }} .

      - name: Trivy scan (no action)
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            if docker pull aquasec/trivy:latest; then break; fi
            echo "Retry docker pull trivy ($i/3)"; sleep 3
          done
          docker run --rm -v /var/run/docker.sock:/var/run/docker.sock \
            aquasec/trivy:latest image --severity CRITICAL,HIGH --exit-code 1 \
            ghcr.io/${{ github.repository }}:sha-${{ github.sha }}

      - name: Push to GHCR
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker push ghcr.io/${{ github.repository }}:sha-${{ github.sha }}

      - name: Install cosign (keyless)
        run: |
          set -euo pipefail
          COSIGN_VERSION="v2.2.4"
          curl -sSL -o cosign.tgz "https://github.com/sigstore/cosign/releases/download/${COSIGN_VERSION}/cosign-linux-amd64.tar.gz"
          tar xzf cosign.tgz
          sudo mv cosign /usr/local/bin/cosign
          cosign version

      - name: Sign image
        env:
          COSIGN_EXPERIMENTAL: "1"
        run: cosign sign ghcr.io/${{ github.repository }}:sha-${{ github.sha }}

  # --- 4) DAST (Baseline/Full) ---
  dast-zap-baseline:
    needs: [ detect, build-image ]
    if: ${{ needs.detect.outputs.has_dockerfile == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 40
    permissions:
      contents: read
    steps:
      - name: Start app container
        run: docker run -d -p 8080:8080 ghcr.io/${{ github.repository }}:sha-${{ github.sha }} && sleep 15
      - name: ZAP baseline
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            if docker pull owasp/zap2docker-stable:latest; then break; fi
            echo "Retry docker pull zap ($i/3)"; sleep 3
          done
          docker run --rm --network host -v "$PWD:/zap/wrk" owasp/zap2docker-stable:latest \
            zap-baseline.py -t http://localhost:8080 -a -r zap-baseline.html

  dast-zap-auth:
    needs: [ detect, build-image ]
    if: ${{ needs.detect.outputs.has_dockerfile == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 60
    permissions:
      contents: read
    steps:
      - name: Start app container
        run: docker run -d -p 8080:8080 ghcr.io/${{ github.repository }}:sha-${{ github.sha }} && sleep 15
      - name: ZAP full scan
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            if docker pull owasp/zap2docker-stable:latest; then break; fi
            echo "Retry docker pull zap ($i/3)"; sleep 3
          done
          docker run --rm --network host -v "$PWD:/zap/wrk" owasp/zap2docker-stable:latest \
            zap-full-scan.py -t http://localhost:8080 -r zap-full.html || true

  # --- 5) IaC/Policy ---
  iac-policy:
    needs: [ detect ]
    if: ${{ needs.detect.outputs.has_policy == 'true' }}
    runs-on: ubuntu-latest
    timeout-minutes: 20
    permissions:
      contents: read
    steps:
      - name: Checkout (manual)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          REPO: ${{ github.repository }}
          SHA:  ${{ github.sha }}
        run: |
          set -euo pipefail
          git init .
          git config --global --add safe.directory "$PWD"
          git remote add origin "https://x-access-token:${GITHUB_TOKEN}@github.com/${REPO}.git"
          git fetch --depth=1 origin "${SHA}"
          git checkout --force FETCH_HEAD

      - name: Checkov via Docker
        run: |
          set -euo pipefail
          for i in 1 2 3; do
            if docker pull bridgecrew/checkov:latest; then break; fi
            echo "Retry docker pull checkov ($i/3)"; sleep 3
          done
          docker run --rm -v "$PWD:/repo" bridgecrew/checkov:latest -d /repo --quiet

      - name: OPA/Conftest install and run
        run: |
          set -euo pipefail
          curl -sSL -o conftest.tar.gz https://github.com/open-policy-agent/conftest/releases/latest/download/conftest_Linux_x86_64.tar.gz
          tar xzf conftest.tar.gz
          sudo mv conftest /usr/local/bin/conftest
          ./conftest test policy/
